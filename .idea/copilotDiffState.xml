<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;) version &quot;2.7.7&quot;&#10;    id(&quot;kotlin-parcelize&quot;)&#10;    kotlin(&quot;kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.learnlog&quot;&#10;    // Use 34 to match the stable toolchain here&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.learnlog&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    buildFeatures {&#10;        dataBinding = true&#10;        viewBinding = true&#10;    }&#10;&#10;    lint {&#10;        abortOnError = false&#10;        checkReleaseBuilds = false&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    kapt {&#10;        correctErrorTypes = true&#10;        arguments {&#10;            arg(&quot;room.schemaLocation&quot;, &quot;$projectDir/schemas&quot;)&#10;            arg(&quot;room.incremental&quot;, &quot;true&quot;)&#10;            arg(&quot;room.expandProjection&quot;, &quot;true&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // --- Kotlin BOM ---&#10;    implementation(platform(&quot;org.jetbrains.kotlin:kotlin-bom:1.8.0&quot;))&#10;&#10;    // --- AndroidX core/ui ---&#10;    implementation(&quot;androidx.core:core-ktx:1.13.1&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.7.0&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.12.0&quot;)&#10;    implementation(&quot;androidx.activity:activity-ktx:1.9.2&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.fragment:fragment-ktx:1.8.3&quot;)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;&#10;    // --- Navigation ---&#10;    val navVersion = &quot;2.7.3&quot;&#10;    implementation(&quot;androidx.navigation:navigation-fragment-ktx:$navVersion&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui-ktx:$navVersion&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-runtime-ktx:$navVersion&quot;)&#10;&#10;    // --- Lifecycle ---&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.5&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.8.5&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.8.5&quot;)&#10;&#10;    // --- Coroutines ---&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1&quot;)&#10;&#10;    // --- Room (kapt) ---&#10;    val roomVersion = &quot;2.6.1&quot;&#10;    implementation(&quot;androidx.room:room-runtime:$roomVersion&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:$roomVersion&quot;)&#10;    kapt(&quot;androidx.room:room-compiler:$roomVersion&quot;)&#10;&#10;    // --- DataStore ---&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.1.1&quot;)&#10;&#10;    // --- WorkManager for background tasks ---&#10;    implementation(&quot;androidx.work:work-runtime-ktx:2.9.0&quot;)&#10;    implementation(&quot;androidx.hilt:hilt-work:1.2.0&quot;)&#10;    kapt(&quot;androidx.hilt:hilt-compiler:1.2.0&quot;)&#10;&#10;    // --- Paging for large lists ---&#10;    implementation(&quot;androidx.paging:paging-runtime-ktx:3.2.1&quot;)&#10;&#10;    // --- Hilt (plugin applied above + kapt) ---&#10;    implementation(&quot;com.google.dagger:hilt-android:2.51.1&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-compiler:2.51.1&quot;)&#10;&#10;    // --- Gson ---&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // --- Utilities ---&#10;    implementation(&quot;com.github.PhilJay:MPAndroidChart:v3.1.0&quot;)&#10;    implementation(&quot;com.jakewharton.threetenabp:threetenabp:1.4.6&quot;)&#10;&#10;    // --- Testing ---&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;) version &quot;2.7.7&quot;&#10;    id(&quot;kotlin-parcelize&quot;)&#10;    kotlin(&quot;kapt&quot;)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.learnlog&quot;&#10;    // Use 34 to match the stable toolchain here&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.learnlog&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    buildFeatures {&#10;        dataBinding = true&#10;        viewBinding = true&#10;    }&#10;&#10;    lint {&#10;        abortOnError = false&#10;        checkReleaseBuilds = false&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;&#10;    kapt {&#10;        correctErrorTypes = true&#10;        arguments {&#10;            arg(&quot;room.schemaLocation&quot;, &quot;$projectDir/schemas&quot;)&#10;            arg(&quot;room.incremental&quot;, &quot;true&quot;)&#10;            arg(&quot;room.expandProjection&quot;, &quot;true&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // --- Kotlin BOM ---&#10;    implementation(platform(&quot;org.jetbrains.kotlin:kotlin-bom:1.8.0&quot;))&#10;&#10;    // --- AndroidX core/ui ---&#10;    implementation(&quot;androidx.core:core-ktx:1.13.1&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.7.0&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.12.0&quot;)&#10;    implementation(&quot;androidx.activity:activity-ktx:1.9.2&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.fragment:fragment-ktx:1.8.3&quot;)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;&#10;    // --- Navigation ---&#10;    val navVersion = &quot;2.7.3&quot;&#10;    implementation(&quot;androidx.navigation:navigation-fragment-ktx:$navVersion&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui-ktx:$navVersion&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-runtime-ktx:$navVersion&quot;)&#10;&#10;    // --- Lifecycle ---&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.5&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.8.5&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.8.5&quot;)&#10;&#10;    // --- Coroutines ---&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1&quot;)&#10;&#10;    // --- Room (kapt) ---&#10;    val roomVersion = &quot;2.6.1&quot;&#10;    implementation(&quot;androidx.room:room-runtime:$roomVersion&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:$roomVersion&quot;)&#10;    kapt(&quot;androidx.room:room-compiler:$roomVersion&quot;)&#10;&#10;    // --- DataStore ---&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.1.1&quot;)&#10;&#10;    // --- WorkManager for background tasks ---&#10;    implementation(&quot;androidx.work:work-runtime-ktx:2.9.0&quot;)&#10;    implementation(&quot;androidx.hilt:hilt-work:1.2.0&quot;)&#10;    kapt(&quot;androidx.hilt:hilt-compiler:1.2.0&quot;)&#10;&#10;    // --- Paging for large lists ---&#10;    implementation(&quot;androidx.paging:paging-runtime-ktx:3.2.1&quot;)&#10;&#10;    // --- Hilt (plugin applied above + kapt) ---&#10;    implementation(&quot;com.google.dagger:hilt-android:2.51.1&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-compiler:2.51.1&quot;)&#10;&#10;    // --- Firebase &amp; Auth ---&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:32.7.0&quot;))&#10;    implementation(&quot;com.google.firebase:firebase-auth-ktx&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-firestore-ktx&quot;)&#10;    implementation(&quot;com.google.android.gms:play-services-auth:20.7.0&quot;)&#10;&#10;    // --- Gson ---&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // --- Utilities ---&#10;    implementation(&quot;com.github.PhilJay:MPAndroidChart:v3.1.0&quot;)&#10;    implementation(&quot;com.jakewharton.threetenabp:threetenabp:1.4.6&quot;)&#10;&#10;    // --- Testing ---&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/google-services.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/google-services.json" />
              <option name="originalContent" value="{&#10;  &quot;project_info&quot;: {&#10;    &quot;project_number&quot;: &quot;762310666511&quot;,&#10;    &quot;project_id&quot;: &quot;learnlog-1babb&quot;,&#10;    &quot;storage_bucket&quot;: &quot;learnlog-1babb.firebasestorage.app&quot;&#10;  },&#10;  &quot;client&quot;: [&#10;    {&#10;      &quot;client_info&quot;: {&#10;        &quot;mobilesdk_app_id&quot;: &quot;1:762310666511:android:91fd3a81ccb65cd23cf67a&quot;,&#10;        &quot;android_client_info&quot;: {&#10;          &quot;package_name&quot;: &quot;com.teddy.learnlog&quot;&#10;        }&#10;      },&#10;      &quot;oauth_client&quot;: [],&#10;      &quot;api_key&quot;: [&#10;        {&#10;          &quot;current_key&quot;: &quot;AIzaSyARtaVMVgLwGazqAGbY6mxaXJOs7iNkzMc&quot;&#10;        }&#10;      ],&#10;      &quot;services&quot;: {&#10;        &quot;appinvite_service&quot;: {&#10;          &quot;other_platform_oauth_client&quot;: []&#10;        }&#10;      }&#10;    }&#10;  ],&#10;  &quot;configuration_version&quot;: &quot;1&quot;&#10;}" />
              <option name="updatedContent" value="{&#10;  &quot;project_info&quot;: {&#10;    &quot;project_number&quot;: &quot;762310666511&quot;,&#10;    &quot;project_id&quot;: &quot;learnlog-1babb&quot;,&#10;    &quot;storage_bucket&quot;: &quot;learnlog-1babb.firebasestorage.app&quot;&#10;  },&#10;  &quot;client&quot;: [&#10;    {&#10;      &quot;client_info&quot;: {&#10;        &quot;mobilesdk_app_id&quot;: &quot;1:762310666511:android:91fd3a81ccb65cd23cf67a&quot;,&#10;        &quot;android_client_info&quot;: {&#10;          &quot;package_name&quot;: &quot;com.example.learnlog&quot;&#10;        }&#10;      },&#10;      &quot;oauth_client&quot;: [],&#10;      &quot;api_key&quot;: [&#10;        {&#10;          &quot;current_key&quot;: &quot;AIzaSyARtaVMVgLwGazqAGbY6mxaXJOs7iNkzMc&quot;&#10;        }&#10;      ],&#10;      &quot;services&quot;: {&#10;        &quot;appinvite_service&quot;: {&#10;          &quot;other_platform_oauth_client&quot;: []&#10;        }&#10;      }&#10;    }&#10;  ],&#10;  &quot;configuration_version&quot;: &quot;1&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_DATA_SYNC&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.LearnLogApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.LearnLog&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.LearnLog&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;.service.TimerService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;dataSync&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_DATA_SYNC&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.LearnLogApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.LearnLog&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.LearnLog&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;.service.TimerService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;dataSync&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/MainActivity.kt" />
              <option name="originalContent" value="package com.example.learnlog&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.setupWithNavController&#10;import com.example.learnlog.databinding.ActivityMainBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var binding: ActivityMainBinding&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        val navHostFragment = supportFragmentManager&#10;            .findFragmentById(R.id.nav_host_fragment) as NavHostFragment&#10;        val navController = navHostFragment.navController&#10;&#10;        // Configure action bar&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(&#10;                R.id.tasksFragment,&#10;                R.id.plannerFragment,&#10;                R.id.timerFragment,&#10;                R.id.insightsFragment,&#10;                R.id.notesFragment&#10;            )&#10;        )&#10;&#10;        // Set up Bottom Navigation&#10;        binding.bottomNavigation.apply {&#10;            setupWithNavController(navController)&#10;            setOnItemReselectedListener { /* Prevent reselection reload */ }&#10;        }&#10;&#10;        // Handle notification intent to open Timer tab&#10;        handleNotificationIntent()&#10;    }&#10;&#10;    private fun handleNotificationIntent() {&#10;        if (intent?.getBooleanExtra(&quot;open_timer_tab&quot;, false) == true) {&#10;            // Navigate to Timer tab&#10;            val navHostFragment = supportFragmentManager&#10;                .findFragmentById(R.id.nav_host_fragment) as NavHostFragment&#10;            val navController = navHostFragment.navController&#10;            navController.navigate(R.id.timerFragment)&#10;        }&#10;    }&#10;&#10;    override fun onNewIntent(intent: android.content.Intent) {&#10;        super.onNewIntent(intent)&#10;        setIntent(intent)&#10;        handleNotificationIntent()&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navHostFragment = supportFragmentManager&#10;            .findFragmentById(R.id.nav_host_fragment) as NavHostFragment&#10;        val navController = navHostFragment.navController&#10;        return navController.navigateUp() || super.onSupportNavigateUp()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.learnlog&#10;&#10;import android.os.Bundle&#10;import android.view.View&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.setupWithNavController&#10;import com.example.learnlog.auth.AuthManager&#10;import com.example.learnlog.databinding.ActivityMainBinding&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import javax.inject.Inject&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var binding: ActivityMainBinding&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;&#10;    @Inject&#10;    lateinit var authManager: AuthManager&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        val navHostFragment = supportFragmentManager&#10;            .findFragmentById(R.id.nav_host_fragment) as NavHostFragment&#10;        val navController = navHostFragment.navController&#10;&#10;        // Check if user is logged in and set start destination accordingly&#10;        val startDestination = if (authManager.isUserLoggedIn) {&#10;            R.id.tasksFragment&#10;        } else {&#10;            R.id.loginFragment&#10;        }&#10;&#10;        // Update navigation graph if needed&#10;        val navGraph = navController.navInflater.inflate(R.navigation.nav_graph)&#10;        navGraph.setStartDestination(startDestination)&#10;        navController.graph = navGraph&#10;&#10;        // Configure action bar&#10;        appBarConfiguration = AppBarConfiguration(&#10;            setOf(&#10;                R.id.tasksFragment,&#10;                R.id.plannerFragment,&#10;                R.id.timerFragment,&#10;                R.id.insightsFragment,&#10;                R.id.notesFragment,&#10;                R.id.loginFragment,&#10;                R.id.registerFragment&#10;            )&#10;        )&#10;&#10;        // Set up Bottom Navigation&#10;        binding.bottomNavigation.apply {&#10;            setupWithNavController(navController)&#10;            setOnItemReselectedListener { /* Prevent reselection reload */ }&#10;        }&#10;&#10;        // Hide bottom navigation on auth screens&#10;        navController.addOnDestinationChangedListener { _, destination, _ -&gt;&#10;            when (destination.id) {&#10;                R.id.loginFragment, R.id.registerFragment -&gt; {&#10;                    binding.bottomNavigation.visibility = View.GONE&#10;                }&#10;                else -&gt; {&#10;                    binding.bottomNavigation.visibility = View.VISIBLE&#10;                }&#10;            }&#10;        }&#10;&#10;        // Handle notification intent to open Timer tab&#10;        handleNotificationIntent()&#10;    }&#10;&#10;    private fun handleNotificationIntent() {&#10;        if (intent?.getBooleanExtra(&quot;open_timer_tab&quot;, false) == true) {&#10;            // Navigate to Timer tab&#10;            val navHostFragment = supportFragmentManager&#10;                .findFragmentById(R.id.nav_host_fragment) as NavHostFragment&#10;            val navController = navHostFragment.navController&#10;            navController.navigate(R.id.timerFragment)&#10;        }&#10;    }&#10;&#10;    override fun onNewIntent(intent: android.content.Intent) {&#10;        super.onNewIntent(intent)&#10;        setIntent(intent)&#10;        handleNotificationIntent()&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navHostFragment = supportFragmentManager&#10;            .findFragmentById(R.id.nav_host_fragment) as NavHostFragment&#10;        val navController = navHostFragment.navController&#10;        return navController.navigateUp() || super.onSupportNavigateUp()&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/AppDatabase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/AppDatabase.java" />
              <option name="updatedContent" value="package com.example.learnlog.data;&#10;&#10;import androidx.room.Database;&#10;import androidx.room.RoomDatabase;&#10;import androidx.room.migration.Migration;&#10;import androidx.sqlite.db.SupportSQLiteDatabase;&#10;&#10;@Database(entities = {TaskEntity.class}, version = 2, exportSchema = false)&#10;public abstract class AppDatabase extends RoomDatabase {&#10;    public abstract TaskDao taskDao();&#10;&#10;    public static final Migration MIGRATION_1_2 = new Migration(1, 2) {&#10;        @Override&#10;        public void migrate(SupportSQLiteDatabase database) {&#10;            database.execSQL(&quot;CREATE TABLE IF NOT EXISTS `tasks` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `title` TEXT, `subject` TEXT, `dueAt` INTEGER, `priority` INTEGER NOT NULL, `status` TEXT, `progress` INTEGER NOT NULL, `completed` INTEGER NOT NULL, `notes` TEXT, `createdAt` INTEGER NOT NULL, `updatedAt` INTEGER NOT NULL)&quot;);&#10;        }&#10;    };&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/TaskDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/TaskDao.java" />
              <option name="updatedContent" value="package com.example.learnlog.data;&#10;&#10;import androidx.room.Dao;&#10;import androidx.room.Insert;&#10;import androidx.room.OnConflictStrategy;&#10;import androidx.room.Query;&#10;import androidx.room.Update;&#10;import kotlinx.coroutines.flow.Flow;&#10;import java.util.List;&#10;&#10;@Dao&#10;public interface TaskDao {&#10;    @Query(&quot;SELECT * FROM tasks&quot;)&#10;    Flow&lt;List&lt;TaskEntity&gt;&gt; getAll();&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insert(task: TaskEntity): Long;&#10;&#10;    @Update&#10;    suspend fun update(task: TaskEntity);&#10;&#10;    @Query(&quot;DELETE FROM tasks WHERE id = :id&quot;)&#10;    suspend fun delete(id: Long);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/TaskEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/TaskEntity.java" />
              <option name="updatedContent" value="package com.example.learnlog.data;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;tasks&quot;)&#10;public class TaskEntity {&#10;    @PrimaryKey(autoGenerate = true)&#10;    public long id;&#10;    public String title;&#10;    public String subject;&#10;    public Long dueAt;&#10;    public int priority; // 0: low, 1: med, 2: high&#10;    public String status; // PENDING, IN_PROGRESS, COMPLETED&#10;    public int progress;&#10;    public boolean completed;&#10;    public String notes;&#10;    public long createdAt;&#10;    public long updatedAt;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/TaskRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/TaskRepository.java" />
              <option name="updatedContent" value="package com.example.learnlog.data;&#10;&#10;import com.example.learnlog.data.TaskDao;&#10;import com.example.learnlog.data.TaskEntity;&#10;import java.util.List;&#10;import javax.inject.Inject;&#10;import javax.inject.Singleton;&#10;import kotlinx.coroutines.flow.Flow;&#10;&#10;@Singleton&#10;public class TaskRepository {&#10;    private final TaskDao taskDao;&#10;&#10;    @Inject&#10;    public TaskRepository(TaskDao taskDao) {&#10;        this.taskDao = taskDao;&#10;    }&#10;&#10;    public Flow&lt;List&lt;TaskEntity&gt;&gt; getTasks() {&#10;        return taskDao.getAll();&#10;    }&#10;&#10;    public suspend fun insert(task: TaskEntity) {&#10;        taskDao.insert(task);&#10;    }&#10;&#10;    public suspend fun update(task: TaskEntity) {&#10;        taskDao.update(task);&#10;    }&#10;&#10;    public suspend fun delete(id: Long) {&#10;        taskDao.delete(id);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/UserPreferencesRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/data/UserPreferencesRepository.java" />
              <option name="updatedContent" value="package com.example.learnlog.data;&#10;&#10;import android.content.Context;&#10;import androidx.datastore.core.DataStore;&#10;import androidx.datastore.preferences.core.Preferences;&#10;import androidx.datastore.preferences.core.edit;&#10;import androidx.datastore.preferences.core.stringPreferencesKey;&#10;import androidx.datastore.preferences.preferencesDataStore;&#10;import com.example.learnlog.ui.tasks.TaskFilter;&#10;import com.example.learnlog.ui.tasks.TaskSort;&#10;import java.io.IOException;&#10;import javax.inject.Inject;&#10;import kotlinx.coroutines.flow.Flow;&#10;import kotlinx.coroutines.flow.catch;&#10;import kotlinx.coroutines.flow.map;&#10;&#10;public class UserPreferencesRepository {&#10;&#10;    private static final String USER_PREFERENCES_NAME = &quot;user_preferences&quot;;&#10;    private static final Context.Key&lt;DataStore&lt;Preferences&gt;&gt; PREFERENCES_KEY =&#10;            new Context.Key&lt;&gt;(USER_PREFERENCES_NAME);&#10;&#10;    private final DataStore&lt;Preferences&gt; dataStore;&#10;&#10;    private static final Preferences.Key&lt;String&gt; TASK_FILTER_KEY = stringPreferencesKey(&quot;task_filter&quot;);&#10;    private static final Preferences.Key&lt;String&gt; TASK_SORT_KEY = stringPreferencesKey(&quot;task_sort&quot;);&#10;&#10;    @Inject&#10;    public UserPreferencesRepository(Context context) {&#10;        this.dataStore = context.getDataStore();&#10;    }&#10;&#10;    public Flow&lt;TaskFilter&gt; getTaskFilter() {&#10;        return dataStore.data()&#10;                .catch((exception) -&gt; {&#10;                    if (exception instanceof IOException) {&#10;                        emit(Preferences.EMPTY);&#10;                    } else {&#10;                        throw exception;&#10;                    }&#10;                })&#10;                .map(preferences -&gt; {&#10;                    String filterName = preferences.get(TASK_FILTER_KEY);&#10;                    return filterName != null ? TaskFilter.valueOf(filterName) : TaskFilter.ALL;&#10;                });&#10;    }&#10;&#10;    public suspend fun setTaskFilter(filter: TaskFilter) {&#10;        dataStore.edit(preferences -&gt; {&#10;            preferences.set(TASK_FILTER_KEY, filter.name());&#10;            return null;&#10;        });&#10;    }&#10;&#10;    public Flow&lt;TaskSort&gt; getTaskSort() {&#10;        return dataStore.data()&#10;                .catch((exception) -&gt; {&#10;                    if (exception instanceof IOException) {&#10;                        emit(Preferences.EMPTY);&#10;                    } else {&#10;                        throw exception;&#10;                    }&#10;                })&#10;                .map(preferences -&gt; {&#10;                    String sortName = preferences.get(TASK_SORT_KEY);&#10;                    return sortName != null ? TaskSort.valueOf(sortName) : TaskSort.DUE_DATE;&#10;                });&#10;    }&#10;&#10;    public suspend fun setTaskSort(sort: TaskSort) {&#10;        dataStore.edit(preferences -&gt; {&#10;            preferences.set(TASK_SORT_KEY, sort.name());&#10;            return null;&#10;        });&#10;    }&#10;&#10;    private static final Context.Getter&lt;DataStore&lt;Preferences&gt;&gt; dataStoreGetter =&#10;            (context) -&gt; preferencesDataStore(USER_PREFERENCES_NAME).getValue(context, null);&#10;&#10;    private static Context.Key&lt;DataStore&lt;Preferences&gt;&gt; getDataStoreKey() {&#10;        return PREFERENCES_KEY;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/di/DataStoreModule.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/di/DataStoreModule.java" />
              <option name="updatedContent" value="package com.example.learnlog.di;&#10;&#10;import android.content.Context;&#10;import com.example.learnlog.data.UserPreferencesRepository;&#10;import dagger.Module;&#10;import dagger.Provides;&#10;import dagger.hilt.InstallIn;&#10;import dagger.hilt.android.qualifiers.ApplicationContext;&#10;import dagger.hilt.components.SingletonComponent;&#10;import javax.inject.Singleton;&#10;&#10;@Module&#10;@InstallIn(SingletonComponent.class)&#10;public class DataStoreModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    public UserPreferencesRepository provideUserPreferencesRepository(@ApplicationContext Context context) {&#10;        return new UserPreferencesRepository(context);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/di/DatabaseModule.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/di/DatabaseModule.java" />
              <option name="updatedContent" value="package com.example.learnlog.di;&#10;&#10;import android.content.Context;&#10;import androidx.room.Room;&#10;import com.example.learnlog.data.AppDatabase;&#10;import com.example.learnlog.data.TaskDao;&#10;import dagger.Module;&#10;import dagger.Provides;&#10;import dagger.hilt.InstallIn;&#10;import dagger.hilt.android.qualifiers.ApplicationContext;&#10;import dagger.hilt.components.SingletonComponent;&#10;import javax.inject.Singleton;&#10;&#10;@Module&#10;@InstallIn(SingletonComponent.class)&#10;public class DatabaseModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    public AppDatabase provideAppDatabase(@ApplicationContext Context context) {&#10;        return Room.databaseBuilder(context, AppDatabase.class, &quot;learnlog-db&quot;)&#10;                .fallbackToDestructiveMigration() // For dev; replace with proper migration for prod&#10;                .build();&#10;    }&#10;&#10;    @Provides&#10;    public TaskDao provideTaskDao(AppDatabase appDatabase) {&#10;        return appDatabase.taskDao();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/auth/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/auth/AuthViewModel.kt" />
              <option name="updatedContent" value="package com.example.learnlog.ui.auth&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.learnlog.auth.AuthManager&#10;import com.google.android.gms.auth.api.signin.GoogleSignInAccount&#10;import com.google.firebase.auth.FirebaseUser&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val authManager: AuthManager&#10;) : ViewModel() {&#10;&#10;    private val _authState = MutableLiveData&lt;AuthState&gt;()&#10;    val authState: LiveData&lt;AuthState&gt; = _authState&#10;&#10;    private val _loading = MutableLiveData&lt;Boolean&gt;(false)&#10;    val loading: LiveData&lt;Boolean&gt; = _loading&#10;&#10;    val currentUser: FirebaseUser?&#10;        get() = authManager.currentUser&#10;&#10;    val isUserLoggedIn: Boolean&#10;        get() = authManager.isUserLoggedIn&#10;&#10;    fun signInWithEmail(email: String, password: String) {&#10;        if (!validateEmail(email)) {&#10;            _authState.value = AuthState.Error(&quot;Please enter a valid email&quot;)&#10;            return&#10;        }&#10;        if (!validatePassword(password)) {&#10;            _authState.value = AuthState.Error(&quot;Password must be at least 6 characters&quot;)&#10;            return&#10;        }&#10;&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            val result = authManager.signInWithEmail(email, password)&#10;            _loading.value = false&#10;            &#10;            result.fold(&#10;                onSuccess = { user -&gt;&#10;                    _authState.value = AuthState.Success(user)&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    _authState.value = AuthState.Error(exception.message ?: &quot;Sign in failed&quot;)&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    fun signUpWithEmail(name: String, email: String, password: String, confirmPassword: String) {&#10;        if (name.isBlank()) {&#10;            _authState.value = AuthState.Error(&quot;Please enter your name&quot;)&#10;            return&#10;        }&#10;        if (!validateEmail(email)) {&#10;            _authState.value = AuthState.Error(&quot;Please enter a valid email&quot;)&#10;            return&#10;        }&#10;        if (!validatePassword(password)) {&#10;            _authState.value = AuthState.Error(&quot;Password must be at least 6 characters&quot;)&#10;            return&#10;        }&#10;        if (password != confirmPassword) {&#10;            _authState.value = AuthState.Error(&quot;Passwords do not match&quot;)&#10;            return&#10;        }&#10;&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            val result = authManager.signUpWithEmail(email, password, name)&#10;            _loading.value = false&#10;            &#10;            result.fold(&#10;                onSuccess = { user -&gt;&#10;                    _authState.value = AuthState.Success(user)&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    _authState.value = AuthState.Error(exception.message ?: &quot;Sign up failed&quot;)&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    fun signInWithGoogle(account: GoogleSignInAccount) {&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            val result = authManager.signInWithGoogle(account)&#10;            _loading.value = false&#10;            &#10;            result.fold(&#10;                onSuccess = { user -&gt;&#10;                    _authState.value = AuthState.Success(user)&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    _authState.value = AuthState.Error(exception.message ?: &quot;Google sign in failed&quot;)&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    fun sendPasswordResetEmail(email: String) {&#10;        if (!validateEmail(email)) {&#10;            _authState.value = AuthState.Error(&quot;Please enter a valid email&quot;)&#10;            return&#10;        }&#10;&#10;        _loading.value = true&#10;        viewModelScope.launch {&#10;            val result = authManager.sendPasswordResetEmail(email)&#10;            _loading.value = false&#10;            &#10;            result.fold(&#10;                onSuccess = {&#10;                    _authState.value = AuthState.PasswordResetSent&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    _authState.value = AuthState.Error(exception.message ?: &quot;Failed to send reset email&quot;)&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    fun signOut() {&#10;        authManager.signOut()&#10;        _authState.value = AuthState.SignedOut&#10;    }&#10;&#10;    private fun validateEmail(email: String): Boolean {&#10;        return email.isNotBlank() &amp;&amp; android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;    }&#10;&#10;    private fun validatePassword(password: String): Boolean {&#10;        return password.length &gt;= 6&#10;    }&#10;&#10;    fun resetAuthState() {&#10;        _authState.value = AuthState.Idle&#10;    }&#10;}&#10;&#10;sealed class AuthState {&#10;    object Idle : AuthState()&#10;    data class Success(val user: FirebaseUser) : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;    object PasswordResetSent : AuthState()&#10;    object SignedOut : AuthState()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/settings/SettingsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/settings/SettingsFragment.kt" />
              <option name="originalContent" value="package com.example.learnlog.ui.settings&#10;&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.learnlog.databinding.FragmentSettingsBinding&#10;import com.example.learnlog.data.export.DataExporter&#10;import com.example.learnlog.data.export.DataImporter&#10;import com.example.learnlog.data.export.ImportMode&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.snackbar.Snackbar&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@AndroidEntryPoint&#10;class SettingsFragment : Fragment() {&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;    private val viewModel: SettingsViewModel by viewModels()&#10;&#10;    @Inject&#10;    lateinit var dataExporter: DataExporter&#10;&#10;    @Inject&#10;    lateinit var dataImporter: DataImporter&#10;&#10;    private var selectedExportFormat: ExportFormat = ExportFormat.JSON&#10;&#10;    private val exportLauncher = registerForActivityResult(&#10;        ActivityResultContracts.CreateDocument(&quot;application/*&quot;)&#10;    ) { uri -&gt;&#10;        uri?.let { exportData(it) }&#10;    }&#10;&#10;    private val importLauncher = registerForActivityResult(&#10;        ActivityResultContracts.OpenDocument()&#10;    ) { uri -&gt;&#10;        uri?.let { previewImport(it) }&#10;    }&#10;&#10;    private enum class ExportFormat { JSON, CSV }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupToolbar()&#10;        setupObservers()&#10;        setupClickListeners()&#10;    }&#10;&#10;    private fun setupToolbar() {&#10;        binding.toolbar.setNavigationOnClickListener {&#10;            findNavController().navigateUp()&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewLifecycleOwner.lifecycleScope.launch {&#10;            viewModel.settings.collect { settings -&gt;&#10;                binding.switchNotifications.isChecked = settings.notificationsEnabled&#10;                binding.switchSound.isChecked = settings.soundEnabled&#10;                binding.switchVibration.isChecked = settings.vibrationEnabled&#10;                binding.tvSoundTone.text = settings.selectedSoundTone&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        // Timer Presets&#10;        binding.cardTimerPresets.setOnClickListener {&#10;            // TODO: Open timer presets dialog&#10;            showTimerPresetsDialog()&#10;        }&#10;&#10;        // Notifications&#10;        binding.switchNotifications.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            viewModel.updateNotificationsEnabled(isChecked)&#10;        }&#10;&#10;        // Sound&#10;        binding.switchSound.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            viewModel.updateSoundEnabled(isChecked)&#10;        }&#10;&#10;        // Vibration&#10;        binding.switchVibration.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            viewModel.updateVibrationEnabled(isChecked)&#10;        }&#10;&#10;        // Sound Tone&#10;        binding.cardSoundTone.setOnClickListener {&#10;            showSoundToneDialog()&#10;        }&#10;&#10;        // Export Data&#10;        binding.cardExport.setOnClickListener {&#10;            showExportFormatDialog()&#10;        }&#10;&#10;        // Import Data&#10;        binding.cardImport.setOnClickListener {&#10;            importLauncher.launch(arrayOf(&quot;application/json&quot;, &quot;application/zip&quot;, &quot;application/octet-stream&quot;))&#10;        }&#10;&#10;        // Clear All Data&#10;        binding.cardClearData.setOnClickListener {&#10;            showClearDataDialog()&#10;        }&#10;&#10;        // Version&#10;        binding.tvVersion.text = &quot;Version 1.0&quot;&#10;    }&#10;&#10;    private fun showTimerPresetsDialog() {&#10;        TimerPresetsDialog().show(childFragmentManager, &quot;timer_presets&quot;)&#10;    }&#10;&#10;    private fun showSoundToneDialog() {&#10;        val tones = arrayOf(&quot;Default&quot;, &quot;Bell&quot;, &quot;Chime&quot;, &quot;Ding&quot;, &quot;Silent&quot;)&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Select Sound Tone&quot;)&#10;            .setItems(tones) { _, which -&gt;&#10;                viewModel.updateSoundTone(tones[which].lowercase())&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun showClearDataDialog() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Clear All Data?&quot;)&#10;            .setMessage(&quot;This will permanently delete all tasks, sessions, notes, and settings. This action cannot be undone.&quot;)&#10;            .setPositiveButton(&quot;Clear All&quot;) { _, _ -&gt;&#10;                // TODO: Implement clear all data&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showExportFormatDialog() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Export Format&quot;)&#10;            .setItems(arrayOf(&quot;JSON&quot;, &quot;CSV (ZIP)&quot;)) { _, which -&gt;&#10;                selectedExportFormat = if (which == 0) ExportFormat.JSON else ExportFormat.CSV&#10;                val extension = if (selectedExportFormat == ExportFormat.JSON) &quot;json&quot; else &quot;zip&quot;&#10;                val timestamp = System.currentTimeMillis()&#10;                exportLauncher.launch(&quot;learnlog_backup_$timestamp.$extension&quot;)&#10;            }&#10;            .show()&#10;    }&#10;&#10;    @Suppress(&quot;UNUSED_PARAMETER&quot;)&#10;    private fun exportData(uri: Uri) {&#10;        binding.progressIndicator.visibility = View.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val result = when (selectedExportFormat) {&#10;                    ExportFormat.JSON -&gt; dataExporter.exportToJson(uri)&#10;                    ExportFormat.CSV -&gt; dataExporter.exportToCsv(uri)&#10;                }&#10;&#10;                binding.progressIndicator.visibility = View.GONE&#10;&#10;                when (result) {&#10;                    is com.example.learnlog.data.export.ExportResult.Success -&gt; {&#10;                        Snackbar.make(&#10;                            binding.root,&#10;                            &quot;Exported ${result.taskCount} tasks, ${result.sessionCount} sessions&quot;,&#10;                            Snackbar.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                    is com.example.learnlog.data.export.ExportResult.Error -&gt; {&#10;                        Snackbar.make(binding.root, &quot;Export failed: ${result.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                binding.progressIndicator.visibility = View.GONE&#10;                Snackbar.make(binding.root, &quot;Export error: ${e.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun previewImport(uri: Uri) {&#10;        binding.progressIndicator.visibility = View.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                when (val preview = dataImporter.previewImport(uri)) {&#10;                    is com.example.learnlog.data.export.ImportPreview.Success -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        showImportOptionsDialog(uri, preview.taskCount, preview.sessionCount)&#10;                    }&#10;                    is com.example.learnlog.data.export.ImportPreview.Error -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        Snackbar.make(binding.root, &quot;Invalid file: ${preview.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                binding.progressIndicator.visibility = View.GONE&#10;                Snackbar.make(binding.root, &quot;Preview error: ${e.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showImportOptionsDialog(uri: Uri, taskCount: Int, sessionCount: Int) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Import Data&quot;)&#10;            .setMessage(&quot;Found $taskCount tasks and $sessionCount sessions.\n\nChoose import mode:&quot;)&#10;            .setPositiveButton(&quot;Merge&quot;) { _, _ -&gt;&#10;                importData(uri, ImportMode.MERGE)&#10;            }&#10;            .setNegativeButton(&quot;Replace All&quot;) { _, _ -&gt;&#10;                confirmReplaceAll(uri)&#10;            }&#10;            .setNeutralButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun confirmReplaceAll(uri: Uri) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Replace All Data?&quot;)&#10;            .setMessage(&quot;This will DELETE all existing data and replace with imported data. This cannot be undone!&quot;)&#10;            .setPositiveButton(&quot;Replace&quot;) { _, _ -&gt;&#10;                importData(uri, ImportMode.REPLACE)&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun importData(uri: Uri, mode: ImportMode) {&#10;        binding.progressIndicator.visibility = View.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                when (val result = dataImporter.importData(uri, mode)) {&#10;                    is com.example.learnlog.data.export.ImportResult.Success -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        Snackbar.make(&#10;                            binding.root,&#10;                            &quot;Imported ${result.taskCount} tasks, ${result.sessionCount} sessions&quot;,&#10;                            Snackbar.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                    is com.example.learnlog.data.export.ImportResult.Error -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        Snackbar.make(binding.root, &quot;Import failed: ${result.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                binding.progressIndicator.visibility = View.GONE&#10;                Snackbar.make(binding.root, &quot;Import error: ${e.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.learnlog.ui.settings&#10;&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.learnlog.R&#10;import com.example.learnlog.databinding.FragmentSettingsBinding&#10;import com.example.learnlog.auth.AuthManager&#10;import com.example.learnlog.data.export.DataExporter&#10;import com.example.learnlog.data.export.DataImporter&#10;import com.example.learnlog.data.export.ImportMode&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.snackbar.Snackbar&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@AndroidEntryPoint&#10;class SettingsFragment : Fragment() {&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;    private val viewModel: SettingsViewModel by viewModels()&#10;&#10;    @Inject&#10;    lateinit var dataExporter: DataExporter&#10;&#10;    @Inject&#10;    lateinit var dataImporter: DataImporter&#10;&#10;    @Inject&#10;    lateinit var authManager: AuthManager&#10;&#10;    private var selectedExportFormat: ExportFormat = ExportFormat.JSON&#10;&#10;    private val exportLauncher = registerForActivityResult(&#10;        ActivityResultContracts.CreateDocument(&quot;application/*&quot;)&#10;    ) { uri -&gt;&#10;        uri?.let { exportData(it) }&#10;    }&#10;&#10;    private val importLauncher = registerForActivityResult(&#10;        ActivityResultContracts.OpenDocument()&#10;    ) { uri -&gt;&#10;        uri?.let { previewImport(it) }&#10;    }&#10;&#10;    private enum class ExportFormat { JSON, CSV }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupToolbar()&#10;        setupObservers()&#10;        setupClickListeners()&#10;    }&#10;&#10;    private fun setupToolbar() {&#10;        binding.toolbar.setNavigationOnClickListener {&#10;            findNavController().navigateUp()&#10;        }&#10;    }&#10;&#10;    private fun setupObservers() {&#10;        viewLifecycleOwner.lifecycleScope.launch {&#10;            viewModel.settings.collect { settings -&gt;&#10;                binding.switchNotifications.isChecked = settings.notificationsEnabled&#10;                binding.switchSound.isChecked = settings.soundEnabled&#10;                binding.switchVibration.isChecked = settings.vibrationEnabled&#10;                binding.tvSoundTone.text = settings.selectedSoundTone&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        // Timer Presets&#10;        binding.cardTimerPresets.setOnClickListener {&#10;            // TODO: Open timer presets dialog&#10;            showTimerPresetsDialog()&#10;        }&#10;&#10;        // Notifications&#10;        binding.switchNotifications.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            viewModel.updateNotificationsEnabled(isChecked)&#10;        }&#10;&#10;        // Sound&#10;        binding.switchSound.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            viewModel.updateSoundEnabled(isChecked)&#10;        }&#10;&#10;        // Vibration&#10;        binding.switchVibration.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            viewModel.updateVibrationEnabled(isChecked)&#10;        }&#10;&#10;        // Sound Tone&#10;        binding.cardSoundTone.setOnClickListener {&#10;            showSoundToneDialog()&#10;        }&#10;&#10;        // Export Data&#10;        binding.cardExport.setOnClickListener {&#10;            showExportFormatDialog()&#10;        }&#10;&#10;        // Import Data&#10;        binding.cardImport.setOnClickListener {&#10;            importLauncher.launch(arrayOf(&quot;application/json&quot;, &quot;application/zip&quot;, &quot;application/octet-stream&quot;))&#10;        }&#10;&#10;        // Clear All Data&#10;        binding.cardClearData.setOnClickListener {&#10;            showClearDataDialog()&#10;        }&#10;&#10;        // Sign Out&#10;        binding.cardSignOut.setOnClickListener {&#10;            showSignOutDialog()&#10;        }&#10;&#10;        // Version&#10;        binding.tvVersion.text = &quot;Version 1.0&quot;&#10;    }&#10;&#10;    private fun showTimerPresetsDialog() {&#10;        TimerPresetsDialog().show(childFragmentManager, &quot;timer_presets&quot;)&#10;    }&#10;&#10;    private fun showSoundToneDialog() {&#10;        val tones = arrayOf(&quot;Default&quot;, &quot;Bell&quot;, &quot;Chime&quot;, &quot;Ding&quot;, &quot;Silent&quot;)&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Select Sound Tone&quot;)&#10;            .setItems(tones) { _, which -&gt;&#10;                viewModel.updateSoundTone(tones[which].lowercase())&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun showClearDataDialog() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Clear All Data?&quot;)&#10;            .setMessage(&quot;This will permanently delete all tasks, sessions, notes, and settings. This action cannot be undone.&quot;)&#10;            .setPositiveButton(&quot;Clear All&quot;) { _, _ -&gt;&#10;                // TODO: Implement clear all data&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showExportFormatDialog() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Export Format&quot;)&#10;            .setItems(arrayOf(&quot;JSON&quot;, &quot;CSV (ZIP)&quot;)) { _, which -&gt;&#10;                selectedExportFormat = if (which == 0) ExportFormat.JSON else ExportFormat.CSV&#10;                val extension = if (selectedExportFormat == ExportFormat.JSON) &quot;json&quot; else &quot;zip&quot;&#10;                val timestamp = System.currentTimeMillis()&#10;                exportLauncher.launch(&quot;learnlog_backup_$timestamp.$extension&quot;)&#10;            }&#10;            .show()&#10;    }&#10;&#10;    @Suppress(&quot;UNUSED_PARAMETER&quot;)&#10;    private fun exportData(uri: Uri) {&#10;        binding.progressIndicator.visibility = View.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val result = when (selectedExportFormat) {&#10;                    ExportFormat.JSON -&gt; dataExporter.exportToJson(uri)&#10;                    ExportFormat.CSV -&gt; dataExporter.exportToCsv(uri)&#10;                }&#10;&#10;                binding.progressIndicator.visibility = View.GONE&#10;&#10;                when (result) {&#10;                    is com.example.learnlog.data.export.ExportResult.Success -&gt; {&#10;                        Snackbar.make(&#10;                            binding.root,&#10;                            &quot;Exported ${result.taskCount} tasks, ${result.sessionCount} sessions&quot;,&#10;                            Snackbar.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                    is com.example.learnlog.data.export.ExportResult.Error -&gt; {&#10;                        Snackbar.make(binding.root, &quot;Export failed: ${result.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                binding.progressIndicator.visibility = View.GONE&#10;                Snackbar.make(binding.root, &quot;Export error: ${e.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun previewImport(uri: Uri) {&#10;        binding.progressIndicator.visibility = View.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                when (val preview = dataImporter.previewImport(uri)) {&#10;                    is com.example.learnlog.data.export.ImportPreview.Success -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        showImportOptionsDialog(uri, preview.taskCount, preview.sessionCount)&#10;                    }&#10;                    is com.example.learnlog.data.export.ImportPreview.Error -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        Snackbar.make(binding.root, &quot;Invalid file: ${preview.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                binding.progressIndicator.visibility = View.GONE&#10;                Snackbar.make(binding.root, &quot;Preview error: ${e.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showImportOptionsDialog(uri: Uri, taskCount: Int, sessionCount: Int) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Import Data&quot;)&#10;            .setMessage(&quot;Found $taskCount tasks and $sessionCount sessions.\n\nChoose import mode:&quot;)&#10;            .setPositiveButton(&quot;Merge&quot;) { _, _ -&gt;&#10;                importData(uri, ImportMode.MERGE)&#10;            }&#10;            .setNegativeButton(&quot;Replace All&quot;) { _, _ -&gt;&#10;                confirmReplaceAll(uri)&#10;            }&#10;            .setNeutralButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun confirmReplaceAll(uri: Uri) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Replace All Data?&quot;)&#10;            .setMessage(&quot;This will DELETE all existing data and replace with imported data. This cannot be undone!&quot;)&#10;            .setPositiveButton(&quot;Replace&quot;) { _, _ -&gt;&#10;                importData(uri, ImportMode.REPLACE)&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun importData(uri: Uri, mode: ImportMode) {&#10;        binding.progressIndicator.visibility = View.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                when (val result = dataImporter.importData(uri, mode)) {&#10;                    is com.example.learnlog.data.export.ImportResult.Success -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        Snackbar.make(&#10;                            binding.root,&#10;                            &quot;Imported ${result.taskCount} tasks, ${result.sessionCount} sessions&quot;,&#10;                            Snackbar.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                    is com.example.learnlog.data.export.ImportResult.Error -&gt; {&#10;                        binding.progressIndicator.visibility = View.GONE&#10;                        Snackbar.make(binding.root, &quot;Import failed: ${result.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                binding.progressIndicator.visibility = View.GONE&#10;                Snackbar.make(binding.root, &quot;Import error: ${e.message}&quot;, Snackbar.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showSignOutDialog() {&#10;        val currentUser = authManager.currentUser&#10;        val userName = currentUser?.displayName ?: currentUser?.email ?: &quot;User&quot;&#10;        &#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Sign Out&quot;)&#10;            .setMessage(&quot;Are you sure you want to sign out, $userName?&quot;)&#10;            .setPositiveButton(&quot;Sign Out&quot;) { _, _ -&gt;&#10;                authManager.signOut()&#10;                // Navigate to login screen&#10;                findNavController().navigate(R.id.loginFragment)&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/AddEditTaskBottomSheet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/AddEditTaskBottomSheet.java" />
              <option name="updatedContent" value="package com.example.learnlog.ui.tasks;&#10;&#10;import android.app.DatePickerDialog;&#10;import android.app.TimePickerDialog;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Toast;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.viewModels;&#10;import com.example.learnlog.data.TaskEntity;&#10;import com.example.learnlog.databinding.DialogAddTaskBinding;&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.Locale;&#10;&#10;public class AddEditTaskBottomSheet extends BottomSheetDialogFragment {&#10;&#10;    private DialogAddTaskBinding binding;&#10;    private final TasksViewModel viewModel;&#10;    private TaskEntity currentTask;&#10;    private Calendar dueDateTime = Calendar.getInstance();&#10;&#10;    public AddEditTaskBottomSheet(TasksViewModel viewModel, @Nullable TaskEntity task) {&#10;        this.viewModel = viewModel;&#10;        this.currentTask = task;&#10;        if (task != null &amp;&amp; task.dueAt != null) {&#10;            dueDateTime.setTimeInMillis(task.dueAt);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        binding = DialogAddTaskBinding.inflate(inflater, container, false);&#10;        return binding.getRoot();&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(View view, Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        if (currentTask != null) {&#10;            binding.titleInput.setText(currentTask.title);&#10;            binding.subjectInput.setText(currentTask.subject);&#10;            binding.notesInput.setText(currentTask.notes);&#10;            binding.priorityGroup.check(getPriorityChipId(currentTask.priority));&#10;            updateDateTimeFields();&#10;        }&#10;&#10;        binding.datePicker.setOnClickListener(v -&gt; showDatePicker());&#10;        binding.timePicker.setOnClickListener(v -&gt; showTimePicker());&#10;&#10;        binding.btnSave.setOnClickListener(v -&gt; saveTask());&#10;    }&#10;&#10;    private void showDatePicker() {&#10;        new DatePickerDialog(&#10;                requireContext(),&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    dueDateTime.set(Calendar.YEAR, year);&#10;                    dueDateTime.set(Calendar.MONTH, month);&#10;                    dueDateTime.set(Calendar.DAY_OF_MONTH, dayOfMonth);&#10;                    updateDateTimeFields();&#10;                },&#10;                dueDateTime.get(Calendar.YEAR),&#10;                dueDateTime.get(Calendar.MONTH),&#10;                dueDateTime.get(Calendar.DAY_OF_MONTH)&#10;        ).show();&#10;    }&#10;&#10;    private void showTimePicker() {&#10;        new TimePickerDialog(&#10;                requireContext(),&#10;                (view, hourOfDay, minute) -&gt; {&#10;                    dueDateTime.set(Calendar.HOUR_OF_DAY, hourOfDay);&#10;                    dueDateTime.set(Calendar.MINUTE, minute);&#10;                    updateDateTimeFields();&#10;                },&#10;                dueDateTime.get(Calendar.HOUR_OF_DAY),&#10;                dueDateTime.get(Calendar.MINUTE),&#10;                false&#10;        ).show();&#10;    }&#10;&#10;    private void updateDateTimeFields() {&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;EEE, MMM d, yyyy&quot;, Locale.getDefault());&#10;        binding.datePicker.setText(dateFormat.format(dueDateTime.getTime()));&#10;        SimpleDateFormat timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault());&#10;        binding.timePicker.setText(timeFormat.format(dueDateTime.getTime()));&#10;    }&#10;&#10;    private void saveTask() {&#10;        String title = binding.titleInput.getText().toString().trim();&#10;        if (title.isEmpty()) {&#10;            Toast.makeText(getContext(), &quot;Title cannot be empty&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        String subject = binding.subjectInput.getText().toString().trim();&#10;        String notes = binding.notesInput.getText().toString().trim();&#10;        int priority = getPriorityFromChipId(binding.priorityGroup.getCheckedChipId());&#10;&#10;        if (currentTask == null) {&#10;            // New Task&#10;            TaskEntity newTask = new TaskEntity();&#10;            newTask.title = title;&#10;            newTask.subject = subject;&#10;            newTask.notes = notes;&#10;            newTask.priority = priority;&#10;            newTask.dueAt = dueDateTime.getTimeInMillis();&#10;            newTask.status = &quot;PENDING&quot;;&#10;            newTask.completed = false;&#10;            newTask.createdAt = System.currentTimeMillis();&#10;            newTask.updatedAt = System.currentTimeMillis();&#10;            viewModel.insert(newTask);&#10;        } else {&#10;            // Update Task&#10;            currentTask.title = title;&#10;            currentTask.subject = subject;&#10;            currentTask.notes = notes;&#10;            currentTask.priority = priority;&#10;            currentTask.dueAt = dueDateTime.getTimeInMillis();&#10;            currentTask.updatedAt = System.currentTimeMillis();&#10;            viewModel.update(currentTask);&#10;        }&#10;        dismiss();&#10;    }&#10;&#10;    private int getPriorityFromChipId(int chipId) {&#10;        if (chipId == binding.chipHigh.getId()) return 2;&#10;        if (chipId == binding.chipMedium.getId()) return 1;&#10;        return 0; // Low&#10;    }&#10;&#10;    private int getPriorityChipId(int priority) {&#10;        if (priority == 2) return binding.chipHigh.getId();&#10;        if (priority == 1) return binding.chipMedium.getId();&#10;        return binding.chipLow.getId();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        binding = null;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/TaskFilter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/TaskFilter.java" />
              <option name="updatedContent" value="package com.example.learnlog.ui.tasks;&#10;&#10;enum class TaskFilter {&#10;    ALL,&#10;    DUE,&#10;    COMPLETED&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/TaskSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/TaskSort.java" />
              <option name="updatedContent" value="package com.example.learnlog.ui.tasks;&#10;&#10;enum class TaskSort {&#10;    DUE_DATE,&#10;    PRIORITY,&#10;    TITLE&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/TasksViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/learnlog/ui/tasks/TasksViewModel.java" />
              <option name="originalContent" value="&#10;&#10;    private final TaskRepository taskRepository;&#10;    private final UserPreferencesRepository userPreferencesRepository;&#10;&#10;    private final MutableStateFlow&lt;TaskFilter&gt; _taskFilter;&#10;    private final MutableStateFlow&lt;TaskSort&gt; _taskSort;&#10;&#10;    public final StateFlow&lt;List&lt;TaskEntity&gt;&gt; uiState;&#10;&#10;    @Inject&#10;    public TasksViewModel(TaskRepository taskRepository, UserPreferencesRepository userPreferencesRepository) {&#10;        this.taskRepository = taskRepository;&#10;        this.userPreferencesRepository = userPreferencesRepository;&#10;&#10;        _taskFilter = new MutableStateFlow&lt;&gt;(TaskFilter.ALL);&#10;        _taskSort = new MutableStateFlow&lt;&gt;(TaskSort.DUE_DATE);&#10;" />
              <option name="updatedContent" value="package com.example.learnlog.ui.tasks;&#10;&#10;import androidx.lifecycle.ViewModel;&#10;import androidx.lifecycle.viewModelScope;&#10;import com.example.learnlog.data.TaskEntity;&#10;import com.example.learnlog.data.TaskRepository;&#10;import com.example.learnlog.data.UserPreferencesRepository;&#10;import dagger.hilt.android.lifecycle.HiltViewModel;&#10;import javax.inject.Inject;&#10;import kotlinx.coroutines.flow.Flow;&#10;import kotlinx.coroutines.flow.MutableStateFlow;&#10;import kotlinx.coroutines.flow.StateFlow;&#10;import kotlinx.coroutines.flow.combine;&#10;import kotlinx.coroutines.launch;&#10;import java.util.List;&#10;&#10;@HiltViewModel&#10;public class TasksViewModel extends ViewModel {&#10;&#10;    private final TaskRepository taskRepository;&#10;    private final UserPreferencesRepository userPreferencesRepository;&#10;&#10;    private final MutableStateFlow&lt;TaskFilter&gt; _taskFilter;&#10;    private final MutableStateFlow&lt;TaskSort&gt; _taskSort;&#10;&#10;    public final StateFlow&lt;List&lt;TaskEntity&gt;&gt; uiState;&#10;&#10;    @Inject&#10;    public TasksViewModel(TaskRepository taskRepository, UserPreferencesRepository userPreferencesRepository) {&#10;        this.taskRepository = taskRepository;&#10;        this.userPreferencesRepository = userPreferencesRepository;&#10;&#10;        _taskFilter = new MutableStateFlow&lt;&gt;(TaskFilter.ALL);&#10;        _taskSort = new MutableStateFlow&lt;&gt;(TaskSort.DUE_DATE);&#10;&#10;        viewModelScope.launch(() -&gt; {&#10;            userPreferencesRepository.getTaskFilter().collect(filter -&gt; _taskFilter.setValue(filter));&#10;        });&#10;&#10;        viewModelScope.launch(() -&gt; {&#10;            userPreferencesRepository.getTaskSort().collect(sort -&gt; _taskSort.setValue(sort));&#10;        });&#10;&#10;        uiState = combine(&#10;                taskRepository.getTasks(),&#10;                _taskFilter,&#10;                _taskSort,&#10;                (tasks, filter, sort) -&gt; {&#10;                    return applyFilterAndSort(tasks, filter, sort);&#10;                }&#10;        ).stateIn(viewModelScope, kotlinx.coroutines.flow.SharingStarted.WhileSubscribed(5000), emptyList());&#10;    }&#10;&#10;    public void setFilter(TaskFilter filter) {&#10;        viewModelScope.launch(() -&gt; {&#10;            userPreferencesRepository.setTaskFilter(filter);&#10;        });&#10;    }&#10;&#10;    public void setSort(TaskSort sort) {&#10;        viewModelScope.launch(() -&gt; {&#10;            userPreferencesRepository.setTaskSort(sort);&#10;        });&#10;    }&#10;&#10;    public void toggleComplete(TaskEntity task, boolean completed) {&#10;        viewModelScope.launch(() -&gt; {&#10;            task.completed = completed;&#10;            task.status = completed ? &quot;COMPLETED&quot; : &quot;PENDING&quot;;&#10;            task.updatedAt = System.currentTimeMillis();&#10;            taskRepository.update(task);&#10;        });&#10;    }&#10;&#10;    public void delete(long id) {&#10;        viewModelScope.launch(() -&gt; {&#10;            taskRepository.delete(id);&#10;        });&#10;    }&#10;&#10;    public void insert(TaskEntity task) {&#10;        viewModelScope.launch(() -&gt; {&#10;            taskRepository.insert(task);&#10;        });&#10;    }&#10;&#10;    public void update(TaskEntity task) {&#10;        viewModelScope.launch(() -&gt; {&#10;            taskRepository.update(task);&#10;        });&#10;    }&#10;&#10;    public void reinsert(TaskEntity task) {&#10;        viewModelScope.launch(() -&gt; {&#10;            taskRepository.insert(task);&#10;        });&#10;    }&#10;&#10;    private List&lt;TaskEntity&gt; applyFilterAndSort(List&lt;TaskEntity&gt; tasks, TaskFilter filter, TaskSort sort) {&#10;        // Apply filter&#10;        List&lt;TaskEntity&gt; filteredTasks;&#10;        switch (filter) {&#10;            case DUE:&#10;                filteredTasks = tasks.stream().filter(t -&gt; !t.completed &amp;&amp; t.dueAt != null).collect(java.util.stream.Collectors.toList());&#10;                break;&#10;            case COMPLETED:&#10;                filteredTasks = tasks.stream().filter(t -&gt; t.completed).collect(java.util.stream.Collectors.toList());&#10;                break;&#10;            case ALL:&#10;            default:&#10;                filteredTasks = tasks;&#10;                break;&#10;        }&#10;&#10;        // Apply sort&#10;        switch (sort) {&#10;            case DUE_DATE:&#10;                return filteredTasks.stream().sorted((t1, t2) -&gt; Long.compare(t1.dueAt != null ? t1.dueAt : Long.MAX_VALUE, t2.dueAt != null ? t2.dueAt : Long.MAX_VALUE)).collect(java.util.stream.Collectors.toList());&#10;            case PRIORITY:&#10;                return filteredTasks.stream().sorted((t1, t2) -&gt; Integer.compare(t2.priority, t1.priority)).collect(java.util.stream.Collectors.toList()); // Desc&#10;            case TITLE:&#10;                return filteredTasks.stream().sorted((t1, t2) -&gt; t1.title.compareToIgnoreCase(t2.title)).collect(java.util.stream.Collectors.toList());&#10;            default:&#10;                return filteredTasks;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_google.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_google.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4285F4&quot;&#10;        android:pathData=&quot;M22.56,12.25c0,-0.78 -0.07,-1.53 -0.2,-2.25H12v4.26h5.92c-0.26,1.37 -1.04,2.53 -2.21,3.31v2.77h3.57c2.08,-1.92 3.28,-4.74 3.28,-8.09z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#34A853&quot;&#10;        android:pathData=&quot;M12,23c2.97,0 5.46,-0.98 7.28,-2.66l-3.57,-2.77c-0.98,0.66 -2.23,1.06 -3.71,1.06 -2.86,0 -5.29,-1.93 -6.16,-4.53H2.18v2.84C3.99,20.53 7.7,23 12,23z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FBBC05&quot;&#10;        android:pathData=&quot;M5.84,14.09c-0.22,-0.66 -0.35,-1.36 -0.35,-2.09s0.13,-1.43 0.35,-2.09V7.07H2.18C1.43,8.55 1,10.22 1,12s0.43,3.45 1.18,4.93l2.85,-2.22 0.81,-0.62z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#EA4335&quot;&#10;        android:pathData=&quot;M12,5.38c1.62,0 3.06,0.56 4.21,1.64l3.15,-3.15C17.45,2.09 14.97,1 12,1 7.7,1 3.99,3.47 2.18,7.07l3.66,2.84c0.87,-2.6 3.3,-4.53 6.16,-4.53z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_settings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/screen_bg&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@color/primary_blue&quot;&#10;        android:elevation=&quot;4dp&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.MaterialComponents.Dark.ActionBar&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:navigationIcon=&quot;@drawable/ic_arrow_back&quot;&#10;        app:title=&quot;@string/page_settings_title&quot;&#10;        app:titleTextColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingBottom=&quot;80dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Preferences Section --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;8dp&quot;&#10;                android:text=&quot;@string/preferences&quot;&#10;                android:textColor=&quot;@color/primary_blue&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardTimerPresets&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/timer_presets&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/timer_presets_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;@string/notifications&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot;&#10;                            android:text=&quot;@string/notifications_desc&quot;&#10;                            android:textSize=&quot;12sp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;com.google.android.material.switchmaterial.SwitchMaterial&#10;                        android:id=&quot;@+id/switchNotifications&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:checked=&quot;true&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;@string/sound&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot;&#10;                            android:text=&quot;@string/sound_desc&quot;&#10;                            android:textSize=&quot;12sp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;com.google.android.material.switchmaterial.SwitchMaterial&#10;                        android:id=&quot;@+id/switchSound&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:checked=&quot;true&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;@string/vibration&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot;&#10;                            android:text=&quot;@string/vibration_desc&quot;&#10;                            android:textSize=&quot;12sp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;com.google.android.material.switchmaterial.SwitchMaterial&#10;                        android:id=&quot;@+id/switchVibration&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:checked=&quot;true&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardSoundTone&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/sound_tone&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvSoundTone&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Default&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Data Management Section --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;8dp&quot;&#10;                android:text=&quot;@string/data_management&quot;&#10;                android:textColor=&quot;@color/primary_blue&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardExport&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/export_data&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/export_data_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardImport&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/import_data&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/import_data_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardClearData&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/clear_all_data&quot;&#10;                        android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/clear_all_data_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- About Section --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;8dp&quot;&#10;                android:text=&quot;@string/about&quot;&#10;                android:textColor=&quot;@color/primary_blue&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;LearnLog&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvVersion&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Version 1.0&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;    &lt;com.google.android.material.progressindicator.LinearProgressIndicator&#10;        android:id=&quot;@+id/progressIndicator&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:indeterminate=&quot;true&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/screen_bg&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@color/primary_blue&quot;&#10;        android:elevation=&quot;4dp&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.MaterialComponents.Dark.ActionBar&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:navigationIcon=&quot;@drawable/ic_arrow_back&quot;&#10;        app:title=&quot;@string/page_settings_title&quot;&#10;        app:titleTextColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingBottom=&quot;80dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Preferences Section --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;8dp&quot;&#10;                android:text=&quot;@string/preferences&quot;&#10;                android:textColor=&quot;@color/primary_blue&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardTimerPresets&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/timer_presets&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/timer_presets_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;@string/notifications&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot;&#10;                            android:text=&quot;@string/notifications_desc&quot;&#10;                            android:textSize=&quot;12sp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;com.google.android.material.switchmaterial.SwitchMaterial&#10;                        android:id=&quot;@+id/switchNotifications&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:checked=&quot;true&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;@string/sound&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot;&#10;                            android:text=&quot;@string/sound_desc&quot;&#10;                            android:textSize=&quot;12sp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;com.google.android.material.switchmaterial.SwitchMaterial&#10;                        android:id=&quot;@+id/switchSound&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:checked=&quot;true&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;@string/vibration&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot;&#10;                            android:text=&quot;@string/vibration_desc&quot;&#10;                            android:textSize=&quot;12sp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;com.google.android.material.switchmaterial.SwitchMaterial&#10;                        android:id=&quot;@+id/switchVibration&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:checked=&quot;true&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardSoundTone&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/sound_tone&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvSoundTone&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Default&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Data Management Section --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;8dp&quot;&#10;                android:text=&quot;@string/data_management&quot;&#10;                android:textColor=&quot;@color/primary_blue&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardExport&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/export_data&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/export_data_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardImport&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/import_data&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/import_data_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardClearData&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;@string/clear_all_data&quot;&#10;                        android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;@string/clear_all_data_desc&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- Account Section --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;8dp&quot;&#10;                android:text=&quot;Account&quot;&#10;                android:textColor=&quot;@color/primary_blue&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/cardSignOut&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Sign Out&quot;&#10;                        android:textColor=&quot;@color/primary_blue&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Sign out from your account&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- About Section --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;8dp&quot;&#10;                android:text=&quot;@string/about&quot;&#10;                android:textColor=&quot;@color/primary_blue&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;LearnLog&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvVersion&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot;&#10;                        android:text=&quot;Version 1.0&quot;&#10;                        android:textSize=&quot;12sp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;    &lt;com.google.android.material.progressindicator.LinearProgressIndicator&#10;        android:id=&quot;@+id/progressIndicator&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:indeterminate=&quot;true&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/toolbar&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/tasksFragment&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/tasksFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.tasks.TasksFragment&quot;&#10;        android:label=&quot;@string/nav_tasks&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_tasksFragment_to_timerFragment&quot;&#10;            app:destination=&quot;@id/timerFragment&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;taskId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot;&#10;            app:nullable=&quot;false&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;subjectFilter&quot;&#10;            app:argType=&quot;string&quot;&#10;            app:nullable=&quot;true&quot;&#10;            android:defaultValue=&quot;@null&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/plannerFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.planner.PlannerFragment&quot;&#10;        android:label=&quot;@string/nav_planner&quot; /&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/timerFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.timer.TimerFragment&quot;&#10;        android:label=&quot;@string/nav_timer&quot; &gt;&#10;        &lt;argument&#10;            android:name=&quot;taskId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;taskTitle&quot;&#10;            app:argType=&quot;string&quot;&#10;            app:nullable=&quot;true&quot;&#10;            android:defaultValue=&quot;null&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/insightsFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.insights.InsightsFragment&quot;&#10;        android:label=&quot;@string/nav_insights&quot; &gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_insights_to_tasks&quot;&#10;            app:destination=&quot;@id/tasksFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_insights_to_planner&quot;&#10;            app:destination=&quot;@id/plannerFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/notesFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.notes.NotesFragment&quot;&#10;        android:label=&quot;@string/nav_notes&quot; &gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_notesFragment_to_addEditNoteFragment&quot;&#10;            app:destination=&quot;@id/addEditNoteFragment&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;subjectId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;taskId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/addEditNoteFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.notes.AddEditNoteFragment&quot;&#10;        android:label=&quot;Add/Edit Note&quot; &gt;&#10;        &lt;argument&#10;            android:name=&quot;noteId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/analyticsFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.analytics.AnalyticsFragment&quot;&#10;        android:label=&quot;@string/nav_analytics&quot; /&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/settingsFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.settings.SettingsFragment&quot;&#10;        android:label=&quot;@string/nav_settings&quot; /&gt;&#10;&lt;/navigation&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/loginFragment&quot;&gt;&#10;&#10;    &lt;!-- Auth Fragments --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/loginFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.auth.LoginFragment&quot;&#10;        android:label=&quot;Login&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_loginFragment_to_registerFragment&quot;&#10;            app:destination=&quot;@id/registerFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_loginFragment_to_tasksFragment&quot;&#10;            app:destination=&quot;@id/tasksFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/registerFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.auth.RegisterFragment&quot;&#10;        android:label=&quot;Register&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_registerFragment_to_tasksFragment&quot;&#10;            app:destination=&quot;@id/tasksFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/tasksFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.tasks.TasksFragment&quot;&#10;        android:label=&quot;@string/nav_tasks&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_tasksFragment_to_timerFragment&quot;&#10;            app:destination=&quot;@id/timerFragment&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;taskId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot;&#10;            app:nullable=&quot;false&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;subjectFilter&quot;&#10;            app:argType=&quot;string&quot;&#10;            app:nullable=&quot;true&quot;&#10;            android:defaultValue=&quot;@null&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/plannerFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.planner.PlannerFragment&quot;&#10;        android:label=&quot;@string/nav_planner&quot; /&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/timerFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.timer.TimerFragment&quot;&#10;        android:label=&quot;@string/nav_timer&quot; &gt;&#10;        &lt;argument&#10;            android:name=&quot;taskId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;taskTitle&quot;&#10;            app:argType=&quot;string&quot;&#10;            app:nullable=&quot;true&quot;&#10;            android:defaultValue=&quot;null&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/insightsFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.insights.InsightsFragment&quot;&#10;        android:label=&quot;@string/nav_insights&quot; &gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_insights_to_tasks&quot;&#10;            app:destination=&quot;@id/tasksFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_insights_to_planner&quot;&#10;            app:destination=&quot;@id/plannerFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/notesFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.notes.NotesFragment&quot;&#10;        android:label=&quot;@string/nav_notes&quot; &gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_notesFragment_to_addEditNoteFragment&quot;&#10;            app:destination=&quot;@id/addEditNoteFragment&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;subjectId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;taskId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/addEditNoteFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.notes.AddEditNoteFragment&quot;&#10;        android:label=&quot;Add/Edit Note&quot; &gt;&#10;        &lt;argument&#10;            android:name=&quot;noteId&quot;&#10;            app:argType=&quot;long&quot;&#10;            android:defaultValue=&quot;-1L&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/analyticsFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.analytics.AnalyticsFragment&quot;&#10;        android:label=&quot;@string/nav_analytics&quot; /&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/settingsFragment&quot;&#10;        android:name=&quot;com.example.learnlog.ui.settings.SettingsFragment&quot;&#10;        android:label=&quot;@string/nav_settings&quot; /&gt;&#10;&lt;/navigation&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>